module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  memref.global @lowervec : memref<1001xi8> = dense<"0x000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F406162636465666768696A6B6C6D6E6F707172737475767778797A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000">
  func.func @StringSearch(%arg0: i32, %arg1: i32, %arg2: memref<?xi8>) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c-1_i32 = arith.constant -1 : i32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = arith.index_cast %arg0 : i32 to index
    %1 = arith.addi %arg0, %c-1_i32 : i32
    %2 = arith.index_cast %1 : i32 to index
    %3 = memref.get_global @lowervec : memref<1001xi8>
    %4 = arith.cmpi sgt, %2, %c0 : index
    cf.cond_br %4, ^bb1, ^bb9
  ^bb1:  // pred: ^bb0
    %5 = affine.load %arg2[symbol(%0) - 1] : memref<?xi8>
    %6 = arith.index_cast %5 : i8 to index
    %7 = memref.load %3[%6] : memref<1001xi8>
    cf.br ^bb2(%c0, %arg1 : index, i32)
  ^bb2(%8: index, %9: i32):  // 2 preds: ^bb1, ^bb7
    %10 = arith.cmpi slt, %8, %2 : index
    cf.cond_br %10, ^bb3, ^bb8
  ^bb3:  // pred: ^bb2
    %11 = arith.index_cast %8 : index to i32
    %12 = memref.load %arg2[%8] : memref<?xi8>
    %13 = arith.index_cast %12 : i8 to index
    %14 = memref.load %3[%13] : memref<1001xi8>
    %15 = arith.cmpi eq, %14, %7 : i8
    cf.cond_br %15, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    %16 = arith.subi %arg0, %11 : i32
    %17 = arith.addi %16, %c-1_i32 : i32
    cf.br ^bb6(%17 : i32)
  ^bb5:  // pred: ^bb3
    cf.br ^bb6(%9 : i32)
  ^bb6(%18: i32):  // 2 preds: ^bb4, ^bb5
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %19 = arith.addi %8, %c1 : index
    cf.br ^bb2(%19, %18 : index, i32)
  ^bb8:  // pred: ^bb2
    cf.br ^bb10(%9 : i32)
  ^bb9:  // pred: ^bb0
    cf.br ^bb10(%arg1 : i32)
  ^bb10(%20: i32):  // 2 preds: ^bb8, ^bb9
    cf.br ^bb11
  ^bb11:  // pred: ^bb10
    return %20 : i32
  }
}

