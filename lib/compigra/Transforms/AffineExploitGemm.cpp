//===-  AffineExploitGemm.cpp - Expand the scope of gemm kernels-*- C++ -*-===//
//
// Compigra is under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// Implements the --affine-maximize-gemm pass, which detects and maximize the
// gemm kernels through loop transformations.
//
//===----------------------------------------------------------------------===//

#include "compigra/Transforms/AffineExploitGemm.h"
#include "mlir/Dialect/Affine/IR/AffineOps.h"
#include "mlir/Dialect/Func/IR/FuncOps.h"

using namespace mlir;
using namespace compigra;

struct AffineMaximizeGemmPass
    : public compigra::impl::AffineMaximizeGemmBase<AffineMaximizeGemmPass> {
  explicit AffineMaximizeGemmPass() {}

  void runOnOperation() override {
    MLIRContext *ctx = &getContext();
    OpBuilder builder(ctx);

    // print the function
    func::FuncOp funcOp;
    getOperation()->walk([&](Operation *op) {
      if (isa<func::FuncOp>(op))
        funcOp = cast<func::FuncOp>(op);
    });
    llvm::outs() << funcOp << "\n";
  }
};

namespace compigra {
std::unique_ptr<mlir::Pass> createAffineMaximizeGemm() {
  return std::make_unique<AffineMaximizeGemmPass>();
}
} // namespace compigra
